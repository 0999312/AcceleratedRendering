#version 460 core

struct Vertex {
    float x;
    float y;
    float z;
    int color;
    float u0;
    float v0;
    int uv2;
};

struct VaryingData {
    int offset;
    int sharing;
};

struct SharingData {
    mat4 transform;
    mat3 normal;
    uint flags;
    int mesh;
    uint extra_data_1;
    uint extra_data_2;
};

layout(local_size_x = 128) in;

layout(binding=0, std430) readonly buffer VerticesIn {
    Vertex verticesIn[];
};

layout(binding=1, std430) writeonly buffer VerticesOut {
    Vertex verticesOut[];
};

layout(binding=2, std430) readonly buffer Sharings {
    SharingData sharings[];
};

layout(binding=3, std430) readonly buffer Varyings {
    VaryingData varyings[];
};

layout(binding=4, std430) readonly buffer Mesh {
    Vertex meshVertices[];
};

layout(location=0) uniform uint vertexCount;

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= vertexCount) {
        return;
    }

    int offset = varyings[index].offset;
    uint reference = index - offset;
    int sharing = varyings[reference].sharing;

    int mesh;
    mat4 transformMatrix;
    // mat3 normalMatrix;

    if (sharing != -1) {
        mesh = sharings[sharing].mesh;
        transformMatrix = sharings[sharing].transform;
        // normalMatrix = sharings[sharing].normal;
    } else {
        mesh = -1;
        transformMatrix = mat4(1.0);
        // normalMatrix = mat3(1.0);
    }

    Vertex vertex = mesh != -1 ? meshVertices[mesh + offset] : verticesIn[index];

    vec4 pos = vec4(vertex.x, vertex.y, vertex.z, 1.0);
    // vec3 normal = unpackSnorm4x8(vertex.normal).xyz;

    pos = transformMatrix * pos;
    // normal = normalize(normalMatrix * normal);

    verticesOut[index].x = pos.x;
    verticesOut[index].y = pos.y;
    verticesOut[index].z = pos.z;

    verticesOut[index].u0 = vertex.u0;
    verticesOut[index].v0 = vertex.v0;

    verticesOut[index].color = verticesIn[reference].color;
    // verticesOut[index].uv1 = verticesIn[reference].uv1;
    verticesOut[index].uv2 = verticesIn[reference].uv2;

    // verticesOut[index].normal = packSnorm4x8(vec4(normal, 0.0));
}