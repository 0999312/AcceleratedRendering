#version 460 core

struct Vertex {
    float x;
    float y;
    float z;
    int color;
    float u0;
    float v0;
    int uv1;
    int uv2;
    uint normal;
};

struct VaryingData {
    int mesh;
    int sharing;
    int color;
    int light;
    int overlay;
};

struct SharingData {
    mat4 transform;
    mat3 normal;
    uint flags;
    uint extra_data_0;
    uint extra_data_1;
    uint extra_data_2;
};

struct Polygon {
    int vertex1;
    int vertex2;
    int vertex3;
};

layout(local_size_x=1, local_size_y=1) in;

layout(binding=1, std430) readonly buffer Vertices {
    Vertex vertices[];
};

layout(binding=2, std430) readonly buffer Sharings {
    SharingData sharings[];
};

layout(binding=3, std430) readonly buffer Varyings {
    VaryingData varyings[];
};

layout(binding=5, std430) readonly buffer PolygonsIn {
    Polygon polygonsIn[];
};

layout(binding=6, std430) writeonly buffer PolygonsOut {
    Polygon polygonsOut[];
};

layout(binding=0, offset=0) uniform atomic_uint indexCounter;

uniform mat4 ViewMatrix;

bool isNormalVisable(Vertex vertex);

void main() {
    int index = int(gl_WorkGroupID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y + gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x);

    if (index == 0) {
        atomicCounterExchange(indexCounter, 0u);
    }

    memoryBarrier();

    Polygon polygon = polygonsIn[index];
    VaryingData varyingData = varyings[polygon.vertex1];
    SharingData sharingData = varyingData.sharing != -1 ? sharings[varyingData.sharing] : SharingData(mat4(1.0), mat3(1.0), 0u, 0u, 0u, 0u);
    uint noCull = sharingData.flags & 0x1u;

    if (noCull > 0u
    || isNormalVisable(vertices[polygon.vertex1])
    || isNormalVisable(vertices[polygon.vertex2])
    || isNormalVisable(vertices[polygon.vertex3])
    ) {
        int indexOut = int(atomicCounterAdd(indexCounter, 3)) / 3;

        polygonsOut[indexOut].vertex1 = polygon.vertex1;
        polygonsOut[indexOut].vertex2 = polygon.vertex2;
        polygonsOut[indexOut].vertex3 = polygon.vertex3;
    }
}

bool isNormalVisable(Vertex vertex) {
    vec3 normal = unpackSnorm4x8(vertex.normal).xyz;
    vec4 posStart = vec4(vertex.x, vertex.y, vertex.z, 1.0);
    vec4 posEnd = posStart + vec4(normal, 0.0);

    posStart = ViewMatrix * posStart;
    posEnd = ViewMatrix * posEnd;

    normal = normalize((posEnd - posStart).xyz);
    vec3 ref = normalize(-posStart.xyz);
    float result = dot(ref, normal);

    return result >= 0;
}