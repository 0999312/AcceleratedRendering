#version 460 core

struct Vertex {
    float x;
    float y;
    float z;
    int color;
    float u0;
    float v0;
    int uv1;
    int uv2;
    uint normal;
};

struct IndexData {
    int index;
    int color;
    int light;
    int overlay;
};

layout(local_size_x=1, local_size_y=1) in;

layout(binding=0, std430) buffer Data {
    Vertex vertices[];
} data;
layout(binding=1, std430) readonly buffer Transforms {
    mat4 matrices[];
} transforms;
layout(binding=2, std430) readonly buffer Normals {
    mat3 matrices[];
} normals;
layout(binding=3, std430) readonly buffer Indices {
    IndexData indices[];
} indices;

void main() {
    int index = int(gl_GlobalInvocationID.x);
    IndexData indexData = indices.indices[index];
    int transformIndex = indexData.index;

    if (transformIndex < 0) {
        return;
    }

    Vertex vertex = data.vertices[index];
    vec3 pos = vec3(vertex.x, vertex.y, vertex.z);

    int normalZ = int((vertex.normal >> 16) & 0xFFu);
    int normalY = int((vertex.normal >> 8) & 0xFFu);
    int normalX = int((vertex.normal >> 0) & 0xFFu);

    if (normalX > 127) normalX -= 256;
    if (normalY > 127) normalY -= 256;
    if (normalZ > 127) normalZ -= 256;

    vec3 normal = vec3(normalX / 127.0, normalY / 127.0, normalZ / 127.0);
    vec4 transformed = transforms.matrices[transformIndex] * vec4(pos, 1.0);
    vec3 transformedNormal = normals.matrices[transformIndex] * normal;

    data.vertices[index].x = transformed.x;
    data.vertices[index].y = transformed.y;
    data.vertices[index].z = transformed.z;

    uint transformedNormalX = uint(int(clamp(transformedNormal.x, -1.0, 1.0) * 127.0) & 0xFF);
    uint transformedNormalY = uint(int(clamp(transformedNormal.y, -1.0, 1.0) * 127.0) & 0xFF);
    uint transformedNormalZ = uint(int(clamp(transformedNormal.z, -1.0, 1.0) * 127.0) & 0xFF);
    data.vertices[index].normal = (transformedNormalX << 16) | (transformedNormalY << 8) | (transformedNormalZ << 0);

    data.vertices[index].color = indexData.color;
    data.vertices[index].uv1 = indexData.overlay;
    data.vertices[index].uv2 = indexData.light;
}