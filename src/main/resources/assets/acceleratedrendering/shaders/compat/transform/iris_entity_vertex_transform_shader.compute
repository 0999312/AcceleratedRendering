#version 460 core

struct Vertex {
    float x;
    float y;
    float z;
    int color;
    float u0;
    float v0;
    int uv1;
    int uv2;
    uint normal;
    uint iris_entity_0;
    uint iris_entity_1;
    uint iris_data_2;
    uint iris_data_3;
    uint iris_data_4;
};

struct VaryingData {
    int mesh;
    int sharing;
    int color;
    int light;
    int overlay;
};

struct SharingData {
    mat4 transform;
    mat3 normal;
    uint flags;
    uint iris_entity_0;
    uint iris_entity_1;
    uint extra_data_2;
};

layout(local_size_x=1, local_size_y=1) in;

layout(binding=0, std430) buffer VerticesIn {
    Vertex verticesIn[];
};

layout(binding=1, std430) buffer VerticesOut {
    Vertex verticesOut[];
};

layout(binding=2, std430) readonly buffer Sharings {
    SharingData sharings[];
};

layout(binding=3, std430) readonly buffer Varyings {
    VaryingData varyings[];
};

layout(binding=4, std430) readonly buffer Mesh {
    Vertex meshVertices[];
};

void main() {
    int index = int(gl_WorkGroupID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y + gl_WorkGroupID.y * gl_NumWorkGroups.x + gl_WorkGroupID.x);

    VaryingData varyingData = varyings[index];
    Vertex vertex = varyingData.mesh != -1 ? meshVertices[varyingData.mesh] : verticesIn[index];
    SharingData sharingData = varyingData.sharing != -1 ? sharings[varyingData.sharing] : SharingData(mat4(1.0), mat3(1.0), 0u, vertex.iris_entity_0, vertex.iris_entity_1, 0u);

    vec4 pos = vec4(vertex.x, vertex.y, vertex.z, 1.0);
    vec3 normal = unpackSnorm4x8(vertex.normal).xyz;

    pos = sharingData.transform * pos;
    normal = normalize(sharingData.normal * normal);

    verticesOut[index].x = pos.x;
    verticesOut[index].y = pos.y;
    verticesOut[index].z = pos.z;

    verticesOut[index].u0 = vertex.u0;
    verticesOut[index].v0 = vertex.v0;

    verticesOut[index].color = varyingData.color;
    verticesOut[index].uv1 = varyingData.overlay;
    verticesOut[index].uv2 = varyingData.light;

    verticesOut[index].normal = packSnorm4x8(vec4(normal, 0.0));

    verticesOut[index].iris_entity_0 = sharingData.iris_entity_0;
    verticesOut[index].iris_entity_1 = sharingData.iris_entity_1;
}